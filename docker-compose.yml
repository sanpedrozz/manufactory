services:
  api-gateway:
    restart: always
    build: ./api-gateway
    ports:
      - "8000:80"
    depends_on:
      alarm_service:
        condition: service_healthy
      item_checker_service:
        condition: service_healthy
      plc_reader_service:
        condition: service_healthy
    networks:
      - app-network

  alarm_service:
    restart: always
    build:
      context: .
      dockerfile: services/alarm/Dockerfile
      args:
        BASE_PATH: services/alarm
    environment:
      - UVICORN_PORT=8000
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 10s
      timeout: 5s
      retries: 3

  plc_reader_service:
    restart: always
    build:
      context: .
      dockerfile: services/plc_reader/Dockerfile
      args:
        BASE_PATH: services/plc_reader
    environment:
      - UVICORN_PORT=8000
    volumes:
      - ./shared:/app/shared
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 10s
      timeout: 5s
      retries: 3

  item_checker_service:
    restart: always
    build:
      context: .
      dockerfile: services/item_checker/Dockerfile
      args:
        BASE_PATH: services/item_checker
    environment:
      - UVICORN_PORT=8000
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 10s
      timeout: 5s
      retries: 3


  api_service:
    restart: always
    build: .
    ports:
      - "7000:7000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
